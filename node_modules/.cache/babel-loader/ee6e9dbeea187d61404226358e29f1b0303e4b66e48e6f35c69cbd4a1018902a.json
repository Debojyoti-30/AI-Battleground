{"ast":null,"code":"// import React, { useState } from 'react';\n// import './ChatbotApp.css';\n\n// const ChatbotApp = () => {\n//   const [apiKey1, setApiKey1] = useState('');\n//   const [apiKey2, setApiKey2] = useState('');\n//   const [topic, setTopic] = useState('');\n//   const [ready, setReady] = useState(false);\n//   const [conversation, setConversation] = useState([]);\n//   const [error, setError] = useState('');\n\n//   const handleSubmit = () => {\n//     if (apiKey1 && apiKey2) {\n//       setReady(true);\n//       alert('They are ready for communication.');\n//     } else {\n//       alert('Please enter both API keys.');\n//     }\n//   };\n\n//   const handleGo = async () => {\n//     if (ready && topic) {\n//       try {\n//         const convo = await simulateConversation(apiKey1, apiKey2, topic);\n//         setConversation(convo);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     } else {\n//       alert('Please enter a topic and ensure both API keys are ready.');\n//     }\n//   };\n\n//   const simulateConversation = async (key1, key2, topic) => {\n//     const convo = [];\n//     let context = `Discuss the topic of ${topic}.`;\n\n//     for (let i = 0; i < 2; i++) {\n//       const response1 = await fetchResponse(key1, context);\n//       convo.push({ bot: 'Bot 1', message: response1 });\n//       context = response1;\n\n//       const response2 = await fetchResponse(key2, context);\n//       convo.push({ bot: 'Bot 2', message: response2 });\n//       context = response2;\n//     }\n\n//     return convo;\n//   };\n\n//   const fetchResponse = async (apiKey, prompt) => {\n//     try {\n//       const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           contents: [{\n//             parts: [{ text: prompt }]\n//           }]\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Failed to fetch: ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       return data.candidates[0].content.parts[0].text;\n//     } catch (error) {\n//       throw new Error(`Failed to fetch response: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-app\">\n//       <h1>AI BATTLE-GROUND</h1>\n//       <div className=\"api-keys\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Gemini API Key 1\"\n//           value={apiKey1}\n//           onChange={(e) => setApiKey1(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Gemini API Key 2\"\n//           value={apiKey2}\n//           onChange={(e) => setApiKey2(e.target.value)}\n//         />\n//         <button onClick={handleSubmit}>Submit</button>\n//       </div>\n//       {ready && (\n//         <div className=\"topic-input\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter a topic\"\n//             value={topic}\n//             onChange={(e) => setTopic(e.target.value)}\n//           />\n//           <button onClick={handleGo}>Go</button>\n//         </div>\n//       )}\n//       {error && <div className=\"error\">{error}</div>}\n//       {conversation.length > 0 && (\n//         <div className=\"conversation\">\n//           <h2>Conversation:</h2>\n//           {conversation.map((msg, index) => (\n//             <div key={index} className={`message ${msg.bot}`}>\n//               {msg.message}\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatbotApp;","map":{"version":3,"names":[],"sources":["/Users/krishnendusamanta/Desktop/avax/AI-Battleground1/src/ChatbotApp.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './ChatbotApp.css';\n\n// const ChatbotApp = () => {\n//   const [apiKey1, setApiKey1] = useState('');\n//   const [apiKey2, setApiKey2] = useState('');\n//   const [topic, setTopic] = useState('');\n//   const [ready, setReady] = useState(false);\n//   const [conversation, setConversation] = useState([]);\n//   const [error, setError] = useState('');\n\n//   const handleSubmit = () => {\n//     if (apiKey1 && apiKey2) {\n//       setReady(true);\n//       alert('They are ready for communication.');\n//     } else {\n//       alert('Please enter both API keys.');\n//     }\n//   };\n\n//   const handleGo = async () => {\n//     if (ready && topic) {\n//       try {\n//         const convo = await simulateConversation(apiKey1, apiKey2, topic);\n//         setConversation(convo);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     } else {\n//       alert('Please enter a topic and ensure both API keys are ready.');\n//     }\n//   };\n\n//   const simulateConversation = async (key1, key2, topic) => {\n//     const convo = [];\n//     let context = `Discuss the topic of ${topic}.`;\n\n//     for (let i = 0; i < 2; i++) {\n//       const response1 = await fetchResponse(key1, context);\n//       convo.push({ bot: 'Bot 1', message: response1 });\n//       context = response1;\n\n//       const response2 = await fetchResponse(key2, context);\n//       convo.push({ bot: 'Bot 2', message: response2 });\n//       context = response2;\n//     }\n\n//     return convo;\n//   };\n\n//   const fetchResponse = async (apiKey, prompt) => {\n//     try {\n//       const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           contents: [{\n//             parts: [{ text: prompt }]\n//           }]\n//         }),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Failed to fetch: ${response.statusText}`);\n//       }\n\n//       const data = await response.json();\n//       return data.candidates[0].content.parts[0].text;\n//     } catch (error) {\n//       throw new Error(`Failed to fetch response: ${error.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"chatbot-app\">\n//       <h1>AI BATTLE-GROUND</h1>\n//       <div className=\"api-keys\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Gemini API Key 1\"\n//           value={apiKey1}\n//           onChange={(e) => setApiKey1(e.target.value)}\n//         />\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter Gemini API Key 2\"\n//           value={apiKey2}\n//           onChange={(e) => setApiKey2(e.target.value)}\n//         />\n//         <button onClick={handleSubmit}>Submit</button>\n//       </div>\n//       {ready && (\n//         <div className=\"topic-input\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter a topic\"\n//             value={topic}\n//             onChange={(e) => setTopic(e.target.value)}\n//           />\n//           <button onClick={handleGo}>Go</button>\n//         </div>\n//       )}\n//       {error && <div className=\"error\">{error}</div>}\n//       {conversation.length > 0 && (\n//         <div className=\"conversation\">\n//           <h2>Conversation:</h2>\n//           {conversation.map((msg, index) => (\n//             <div key={index} className={`message ${msg.bot}`}>\n//               {msg.message}\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default ChatbotApp;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}